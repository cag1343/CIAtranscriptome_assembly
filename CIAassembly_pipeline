import pandas as pd
from pathlib import Path

sample_df = pd.read_table(
    (Path(workflow.basedir) / "config/samples.tsv"), 
    dtype=str
    ).set_index(["sample"], drop=False)

def get_sample_attr(df, sample_id, attribute):
    return df[df["sample_id"] == sample_id][attribute].values[0]

os.getcwd()
localrules: all
SAMPLE, = glob_wildcards("FASTQ/{sample}.fastq.gz")
print(SAMPLE)
sample=SAMPLE

metadata = pd.read_csv('config/samples.tsv')

rule all:
    input:
        expand("assembly/flair/{sample}_collapsed_annot.edp.tss/"
               "{sample}.isoforms.gtf", sample=SAMPLE)

rule symlink_annotation:
    input: 
        lambda wc: config["annotation"][wc.annotation]
    output: 
        "annotation/{annotation}"
    shell: 
        "ln -s `readlink -f {input}` {output}"

rule symlink_fastq: 
    input: 
        lambda wc: sample_df[]
    output: 
        "data/{sample}.fastq.gz"

rule symlink_bam: 
    input: 


rule genome_idx:
    input: 
        "annotation/genome.fa"
    output: 
        "index/genome.mmi"
    threads: 
        16
    shell: 
        "minimap2 -t {threads} -k 14 -d {output} {input}"

rule align:
    input:
        fastq="data/{sample}.fastq.gz",
        genome="annotation/genome.fa",
        index="annotation/genome.mmi"
    output:
        bam="minimap2/{sample}.bam",
        bai="minimap2/{sample}.bam.bai"
    threads: 
        16
    env: 
        "envs/minimap_samtools.yaml"
    shell: 
        "minimap2 -t {threads} "
        "-ax splice -uf "
        "{input.genome} "
        "{input.fastq} | "
        "samtools sort -@ {threads} -o {output.bam} -; "
        "samtools index {output.bam}"

rule bam2bed12minimap2:
    input: 
        bam="minimap2/{sample}.bam",
        genome="annotation/genome.fa"
    output:
        "minimap2/{sample}.classified.bed"
    threads: 16
    conda: 
        "envs/flair.yaml"
    shell: 
        "python bam2Bed12.py -i {input.bam} > {output}"

rule flair_correct:
    input: 
        bed="minimap2/{sample}.classified.bed",
        genome="annotation/genome.fa",
        chrom_sizes="annotation/genome.chrom.sizes"
        gtf="annotation/transcriptome.gtf",
    output:
        "assembly/flair/{sample}_all_corrected.psl"
    params:
        outDir="assembly/flair/{sample}"
    threads: 16
    conda: 
        "envs/flair.yaml"
    shell: 
        "flair.py correct "
        "--print_check "
        "-c {input.chromsizes} "
        "-t {threads} "
        "-q {input.bed} "
        "-g {input.genome} "
        "-f {input.gtf} "
        "-o {params.outDir} "


def get_flair_cmdline(wc):
    sample_type = get_sample_attr(sample_df, wc.sample, "sample_type")
    if sample_type not in config["sample_types"]:
        raise ValueError(
            "Error: {sample} has type {type} which is not one of "
            "allowed types {types}".format(
                sample=wc.sample, 
                type=sample_type,
                types=config["sample_types"]
            )
        )
    return config["params"]["flair_collapse_edp_tss"]["sample_type"]

rule flair_collapse_edp_tss:
    input: 
        fastq="data/{sample}.fastq.gz",
        psl="assembly/flair/{sample}_all_corrected.psl",
        gtf="annotation/transcriptome.gtf",
        promoters="annotation/promoter.db.edp.bed",
        genome="annotation/genome.fa",
    output:
        "assembly/flair/{sample}_collapsed_annot.edp.tss/{sample}.isoforms.gtf"
    params:
        outDir="assembly/flair/{sample}_collapsed_annot.edp.tss/{sample}",
        tempdir="tmp/{sample}_flair_collapse",
        cmdline_params=get_flair_cmdline
    threads: 20
    conda: 
        "envs/flair.yaml" # make sure includes minimap
    shell: 
        "mkdir -p {params.tempdir}; "
        "python flair.py collapse "
        "-g {input.genome} "
        "--temp_dir {params.tempdir}"
        "-r {input.fastq} "
        "-t {threads} "
        "-q {input.psl} "
        "-f {input.gtf} "
        "-p {input.promoters} "
        "-o {params.outDir} "
        "{params.cmdline_params}; " # i.e. -s 2 or -s 3
        "rm -rf {params.tempdir}"

rule sqanty_qc_normal:
    input: 
        gtf="assembly/flair/{sample}_collapsed_annot.edp.tss/{sample}.isoforms.gtf",
        gtf_anno="/data/genes.gtf",
        polya_list="/data/sqanti.polya.list",
        junctions_filtered="/data/splice_junctions_filtered.tab"
    output:
           "assembly/sqanti/{sample}_collapsed_annot.edp.tss/{sample}.sqanti_corrected.gtf"
    params:
        gnome="/data/genome.fa",
        outDir="assembly/sqanti/{sample}_collapsed_annot.edp.tss/",
        prefix="{sample}.sqanti",
        internalPrimingWindow=50
    threads: 20
    shell: """
    module load minimap2
    python sqanti3_qc.py --gtf {input[0]}  {input[1]}  {params.gnome} -o {params.prefix} -d {params.outDir} -w {params.internalPrimingWindow}  --polyA_motif_list {input[4]} -c {input[5]}

    """
rule endCorrection:
    input: "assembly/sqanti/{sample}.gtf",
           "assembly/sqanti/{sample}_classification.txt",
           "annotation/genes.gtf",
           "annotation/promoter.db.edp.bed"
    output:
           "cia_assemblies/{sample}.end.corrected.assembly.gtf"
    params:
        endGuides="/annotation/combined.rds.clusters.new.gff",
        refAnnot="/annotation/genes.gtf",
        outDir="cia_assemblies",
        prefix="{sample}",
        refStops="assembly/sqanti/{sample}/{sample}_classification.txt" # not so elegant
    threads: 20
    conda: "/data/hilgers/group/alfonso/projects/LongReadSeq/bin/flair/misc/flair_conda_env.yaml"
    shell: """
    module load R/3.5.0
    Rscript R/RDSguidedCorrection.R -a {input[0]}  -e {params.endGuides} -s {params.refStops}  -r {params.refAnnot} -o cia_assemblies -p {params.prefix}
    """
